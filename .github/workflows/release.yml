name: Release
on:
#  push:
#    branches: [ master ]
  workflow_dispatch:
    inputs:
      release_type:
        required: true
        description: 'Release Type ( auto, alpha, major, minor or patch )'
        default: 'alpha'

jobs:
#   test:
#     name: Test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-node@v2
#         with:
#           node-version: '12'
#           registry-url: 'https://npm.pkg.github.com'
#       - name: Get yarn cache directory path
#         id: yarn-cache-dir-path
#         run: echo "::set-output name=dir::$(yarn cache dir)"
#       - name: Cache yarn cache
#         uses: actions/cache@v2
#         id: cache-yarn-cache
#         with:
#           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#           key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn-
#       - name: Cache node_modules
#         id: cache-node-modules
#         uses: actions/cache@v2
#         with:
#           path: node_modules
#           key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-
#       - run: yarn install
#       - run: yarn workspace @central-tech/api codegen
#       - run: yarn workspace @central-tech/api test:coverage
#       - name: Upload coverage result
#         uses: actions/upload-artifact@v2
#         with:
#           name: coverage-result
#           path: packages/api/coverage/lcov.info

  release:
    name: Release
#     needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PERSONAL_ACCCESS_TOKEN }}
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
          registry-url: 'https://registry.npmjs.org'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-
      - run: yarn install
      - name: Setup git user
        run: |
          git config user.name standard-version-bot
          git config user.email standard-version-bot@users.noreply.github.com
      - name: Generate Version Tag Auto
        if: ${{ github.event.inputs.release_type  == 'auto' }}
        run: |
          npx standard-version
      - name: Generate Version Tag release-as ${{ github.event.inputs.release_type }}
        if: ${{ github.event.inputs.release_type  == 'major' || github.event.inputs.release_type  == 'minor' || github.event.inputs.release_type == 'patch' }}
        run: |
          npx standard-version --release-as ${{ github.event.inputs.release_type }}
      - name: Generate Version Tag release-as ${{ github.event.inputs.release_type }}
        if: ${{ github.event.inputs.release_type == 'alpha' }}
        run: |
          npx standard-version --prerelease ${{ github.event.inputs.release_type }}
      - name: Publish tag
        id: publish_tag
        run: |
          git push --follow-tags
          echo ::set-output name=tag_name::$(git describe HEAD --abbrev=0)
          echo ::set-output name=version::$(git describe HEAD --abbrev=0  | grep -oP "^versions/\K.*")
      - name: Upload Package.json
        uses: actions/upload-artifact@v2
        with:
          name: root-package
          path: package.json
      - run: yarn build
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.publish_tag.outputs.version }}
          tag_name: ${{ steps.publish_tag.outputs.tag_name }}
          body_path: CHANGELOG.md
      - run: yarn deploy
        name: publish to npmjs
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: actions/setup-node@v2
        with:
          registry-url: 'https://npm.pkg.github.com'
      - name: Rename Package for deploy to github
        run: |
          sed -i -e "s/@central-tech/@centraldigital/g" package.json
          grep -rl @central-tech packages | xargs sed -i 's/@central-tech/@centraldigital/g'
      - run: yarn install
      - run: yarn build
      - run: yarn deploy
        name: publish to github
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
